SPA, un paradigma de Arquitectura de Aplicaciones Web en auge
Dentro del desarrollo de aplicaciones web hay una tendencia importante a las denominadas SPA, Single Page Apps. Uno de los principales objetivos es conseguir una mejora importante en la experiencia de usuario: La mejora de los tiempos de espera o latencia entre vistas (similar a las aplicaciones nativas).En esencia los motivos de las ventajas de las SPAs son sencillos, aunque creo que conviene ponerlo un poco en contexto.
Un SPA se carga completo durante el cargado de la página inicial y luego las regiones se reemplazan o se actualizan con los fragmentos de las nuevas páginas según petición del servidor. Para evitar descargas excesivas de características inutilizadas, un SPA descarga progresivamente las características cuando se necesiten, pueden ser fragmentos de las páginas o módulos completos de la pantalla.De esta forma existe una analogía entre los "estados" de un SPA y las "páginas" de un sitio web tradicional. Como la navegación de estados en la misma página es análogo a la navegación de las páginas, en teoría, cualquier página de sitio web podría convertirse a un sitio de página única reemplazando las páginas solamente en las partes donde se generen un cambio.El enfoque de SPA en la página web es similar a Single Document Interface (SDI) que es una técnica para las aplicaciones de escritorio.
¿Qué diferencia hay respecto a aplicaciones web clásicas?Habitualmente la lógica de negocio (el código ejecutable) de aplicaciones web se realiza íntegramente en el lado del servidor, y se confía la propia naturaleza del sistema de URLs el mostrar una “vista de aplicación” u otra. Por ej. en un e-commerce el carrito estará en una URL concreta, mientras que la pantalla de login estará bajo otra URL totalmente diferente. Para el navegador, cada URL diferente es completamente independiente del resto: Aunque tenga los mismos estilos y/o plantillas, estos tienen que volver a ser procesados desde cero. Esto, para la gran mayoría de páginas web dinámicas, implica que al cambiar entre vistas se sufrirá el problema de la latencia en la web (artículo de Ilya Grigorik, developer advocate de Google).Otra característica negativa de esta arquitectura es que el estado de la aplicación del cliente es difícil de mantener, teniendo que hacer auténticos malabarismos para poder gestionar una simple transferencia de información de una vista a otra: Bien lo sabe aquel programador que haya tenido que implementar el típico asistente que se compone de diversas vistas, por ejemplo.¿Podríamos encontrar más pegas? Puede, pero no es el objetivo. Es más, el sistema REST y URLs tiene mucho sentido y aporta muchas otras ventajas desde la misma arquitectura de servicios web (no interficies) hasta el facilitar el lado humano de compartir un recurso vía un enlace, aunque en ciertos aspectos juegue en nuestra contra.
Arquitectura básica de una SPAEn esencia una SPA es la interfaz de la aplicación web implementada casi íntegramente en el navegador (en lenguaje Javascript actualmente), aunque como toda página web tenga una base importante de HTML y CSS.Todas las vistas de la interfaz de la aplicación están contenidas en la SPA, realizando una única carga inicial y potencialmente solo posponiendo recursos pesados: Grandes cantidades de datos, Imágenes, videos, …Por tanto con las SPAs eliminamos por completo uno de los principales cuellos de botella: El problema de la latencia (ver artículo de Grigorik). Así podemos conseguir que la aplicación web alcance la velocidad de cualquier aplicación nativa en lo que se refiere al tiempo de espera al cambiar de vistas. Esto se aprecia notablemente sea cual sea el dispositivo, aunque especialmente cuando se utilizan dispositivos móviles.A su vez, podemos ahorrar mucho ancho de banda y tiempo de proceso de cálculo (en servidor y cliente) si gestionamos el estado de la aplicación desde el cliente con una SPA: Por ejemplo, la SPA del típico e-commerce al cambiar de vista podría mantener en memoria el estado del carrito de compras y no tener que transferir constantemente esa información en el servidor (por supuesto esa información conviene que esté también en el servidor, pero una cosa no está reñida con la otra).